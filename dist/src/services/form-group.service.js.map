{"version":3,"file":"form-group.service.js","sourceRoot":"","sources":["../../../src/services/form-group.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AACzC,OAAO,EAAC,SAAS,EAAE,UAAU,EAAC,MAAM,gBAAgB,CAAC;AACrD,OAAO,mBAAmB,MAAM,uCAAuC,CAAC;AACxE,OAAO,iBAAiB,MAAM,qCAAqC,CAAC;;;;IAI5D,gCAAK,GAAZ,UAAc,KAAU;QACvB,IAAI,IAAI,GAAc,IAAI,SAAS,CAAE,EAAE,CAAE,CAAC;QAE1C,IAAI,QAAa,CAAC;QAClB,EAAE,CAAA,CAAE,KAAM,CAAC,CAAC,CAAC;YACZ,QAAQ,GAAG,IAAI,KAAK,EAAE,CAAC;SACvB;QAED,EAAE,CAAA,CAAE,QAAS,CAAC,CAAC,CAAC;YACf,IAAI,IAAI,GAAwB,EAAE,CAAC;YACnC,IAAI,WAAW,GAAG,IAAI,CAAC;YACvB,GAAG,CAAA,CAAE,IAAM,GAAG,IAAI,QAAS,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,GAAS,QAAS,CAAC,GAAG,GAAG,gBAAgB,CAAC,CAAC;gBAChD,EAAE,CAAA,CAAE,CAAE,CAAC,CAAC,CAAC;oBACR,IAAI,CAAC,IAAI,CAAE,CAAC,CAAE,CAAC;oBACf,EAAE,CAAA,CAAE,CAAC,CAAC,KAAM,CAAC,CAAC,CAAC;wBACd,WAAW,GAAG,KAAK,CAAC;qBACpB;iBACD;aACD;YAED,EAAE,CAAA,CAAE,CAAC,WAAY,CAAC,CAAC,CAAC;gBACnB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAE,GAAG,CAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAE,EAA/G,CAA+G,CAAE,CAAC;aAC9I;YAED,IAAI,CAAC,OAAO,CAAE,UAAC,KAAwB;gBACtC,IAAI,OAAO,GAAG,IAAI,mBAAmB,EAAE,CAAC;gBAExC,OAAO,CAAC,QAAQ,CAAE,KAAK,CAAC,YAAY,IAAI,EAAE,CAAE,CAAC;gBAC7C,OAAO,CAAC,aAAa,CAAE,KAAK,CAAC,UAAU,IAAI,EAAE,CAAE,CAAC;gBAEhD,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW,IAAI,EAAE,CAAC;gBAC9C,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC;gBACjC,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;gBAEhC,IAAI,CAAC,UAAU,CAAE,KAAK,CAAC,IAAI,EAAE,OAAO,CAAE,CAAC;aACvC,CAAE,CAAC;SACJ;QAED,MAAM,CAAC,IAAI,CAAC;KACZ;2BA/CF","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {FormGroup, Validators} from '@angular/forms';\r\nimport FormControlExtended from '../models/form-control-extended.model';\r\nimport FormDecoratorData from '../models/form-decorator-data.model';\r\n\r\n@Injectable()\r\nexport class FormGroupService {\r\n\tpublic build( model: any ) {\r\n\t\tlet form: FormGroup = new FormGroup( {} );\r\n\r\n\t\tlet instance: any;\r\n\t\tif( model ) {\r\n\t\t\tinstance = new model();\r\n\t\t}\r\n\r\n\t\tif( instance ) {\r\n\t\t\tlet data: FormDecoratorData[] = [];\r\n\t\t\tlet haveNoOrder = true;\r\n\t\t\tfor( const key in instance ) {\r\n\t\t\t\tlet d = (<any>instance)[key + \"-form-metadata\"];\r\n\t\t\t\tif( d ) {\r\n\t\t\t\t\tdata.push( d );\r\n\t\t\t\t\tif( d.order ) {\r\n\t\t\t\t\t\thaveNoOrder = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif( !haveNoOrder ) {\r\n\t\t\t\tdata = data.sort( (a, b) => ( a.order !== undefined ? a.order : Number.MAX_VALUE ) - ( b.order !== undefined ? b.order : Number.MAX_VALUE ) );\r\n\t\t\t}\r\n\r\n\t\t\tdata.forEach( (datum: FormDecoratorData) => {\r\n\t\t\t\tlet control = new FormControlExtended();\r\n\t\t\t\t\r\n\t\t\t\tcontrol.setValue( datum.defaultValue || '' );\r\n\t\t\t\tcontrol.setValidators( datum.validators || [] );\r\n\r\n\t\t\t\tcontrol.placeholder = datum.placeholder || '';\r\n\t\t\t\tcontrol.controlType = datum.type;\r\n\t\t\t\tcontrol.options = datum.options;\r\n\t\t\t\t\r\n\t\t\t\tform.addControl( datum.name, control );\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\treturn form;\r\n\t}\r\n}"]}